<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.4.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- <bean id="customAccessDenied" class="com.mycompany.security.security.CustomLoginDeniedHandler"></bean> -->
	<bean id="customLoginSuccess" class="com.mycompany.security.security.CustomLoginSuccessHandler"></bean>

	<!-- auto-config="true"를 설정한것만으로 기본 로그인/http기본인증/로그아웃 기능 제공 
	use-expressions="true"를 설정하면 spEL를 쓰겠다는 것이다. -->
	<security:http auto-config="true" use-expressions="true"> <!-- 컨트롤러 url 작성 -->
		<security:intercept-url pattern="/users/all" access="permitAll" />
		<security:intercept-url pattern="/users/member" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/users/admin" access="hasRole('ROLE_ADMIN')" />
		<!-- form login : login페이지 등록 -->
		<security:form-login login-page="/users/login"
							 authentication-success-handler-ref="customLoginSuccess" />
		<security:logout logout-url="/customLogout" invalidate-session="true" />
							 
		<security:access-denied-handler error-page="/accessError" />
							 
		<!-- 간단한 설정으로도 csrf를 이용한 공격을 막을 수 있다. -->
		<security:csrf />
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="aaa" password="{noop}aaa" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
