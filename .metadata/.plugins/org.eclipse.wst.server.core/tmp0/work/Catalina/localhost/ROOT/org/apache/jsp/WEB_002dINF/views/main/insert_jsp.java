/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-09-24 09:41:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"insert.do\" method=\"post\" id=\"recipeSaveForm\"\r\n");
      out.write("\tencType=\"multipart/form-data\" >\r\n");
      out.write("\t<input type=\"file\" name=\"imgFile\" placeholder=\"레시피 이미지를 삽입해주세요.\"/><br />\r\n");
      out.write("\t<input type=\"text\" name=\"recipeTbTitle\" placeholder=\"레시피 제목을 입력해주세요.\" /><br />\r\n");
      out.write("\t<input type=\"button\" id=\"addIngreBtn\" value=\"재료 추가\" /><br />\r\n");
      out.write("\t<div id=\"addIngreWrap\">\r\n");
      out.write("\t\t<div id=\"addIngre\">\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"ingredientTbName\" \r\n");
      out.write("\t\t\tplaceholder=\"재료를 입력해주세요.\" />\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"addIngDetail\" \r\n");
      out.write("\t\t\tplaceholder=\"추가 옵션 및 설명을 입력해주세요.\" />\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"delIngreBtn\" value=\"재료 삭제\" /><br />\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<textarea name=\"recipeDetail\" id=\"contents\" rows=\"10\" cols=\"100\" \r\n");
      out.write("\tstyle=\"width:100%; height:412px; display:none;\"></textarea>\r\n");
      out.write("\t<input type=\"submit\" id=\"EditorSaveBtn\" value=\"레시피 등록\" />\r\n");
      out.write("</form>\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t\r\n");
      out.write("\t$('#addIngreBtn').on('click', function(){\r\n");
      out.write("\t\tconsole.log(\"재료 삽입 버튼 클릭\");\r\n");
      out.write("\t\t// before, after, clone 등의 함수는 오류 및 인식 안되는 경우가 많아 사용을 지양해야함\r\n");
      out.write("\t\t// 태그를 붙일 때는 반드시 더미 div를 만들고 append 및 prepend 등을 이용하여 삽입해야함\r\n");
      out.write("\t\t$('#addIngreWrap').append(\"<div id='addIngre'><input type='text' name='ingredientTbName' placeholder='재료를 입력해주세요.' /> <input type='text' name='addIngDetail' placeholder='추가 옵션 및 설명을 입력해주세요.' /> <input type='button' id='delIngreBtn' value='재료 삭제' /><br /></div>\");\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 위처럼 append 등을 이용한 삽입 함수로 생성된 동적 태그들은\r\n");
      out.write("\t// 일반적인 이벤트가 적용되지 않는다. 대신, 아래와 같은 형식을 사용하면\r\n");
      out.write("\t// 정상적으로 이벤트가 동작한다.\r\n");
      out.write("\t$(document).on(\"click\", \"#delIngreBtn\", function(){\r\n");
      out.write("\t\tconsole.log(\"재료 삭제 버튼 클릭\");\r\n");
      out.write("\t\t// #delIngreBtn에 연동된 이벤트를 삭제하지 않고 태그만 삭제하려면 detach를 사용해야함.\r\n");
      out.write("\t\t// remove()의 경우 연동된 이벤트까지 삭제할 수 있으므로 사용시 주의할 것!\r\n");
      out.write("\t\t$(this).parent().detach();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
