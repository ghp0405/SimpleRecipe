package com.simplerecipe.common.logger;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class LoggerAspect {
	protected Log log = LogFactory.getLog(LoggerAspect.class);
	static String name = "";
	static String type = "";
	
	// execution(수식어패턴 리턴타입패턴 클래스이름패턴~메서드이름패턴(파라미터패턴))
	// execution(없음 모든타입리턴 com.~~.controller패키지내~~Controller.java클래스
	// ~~Controller.* : 모든 함수에대해 적용, 괄호는 (모든파라미터값받음))
	// final : 자바에서 상수값 선언시 사용, @Around는 상수값만을 취급한다.
	public static final String executionPattern = 
			"execution(* com..controller.*Controller.*(..)) or "
			+ "execution(* com..service.*Impl.*(..)) or "
			+ "execution(* com..dao.*Impl.*(..))";
	@Around(executionPattern)
	public Object logPrint(ProceedingJoinPoint joinPoint) throws Throwable {
		type = joinPoint.getSignature().getDeclaringTypeName();
		
		if(type.indexOf("Controller") > -1) {
			name = "Controller \t:   ";
		}
		else if(type.indexOf("Service") > -1) {
			name = "Service \t:   ";
		}
		else if(type.indexOf("DAO") > -1) {
			name = "DAO \t\t:   ";
		}
		log.debug(name + type + "." + joinPoint.getSignature().getName() + "()");
		return joinPoint.proceed();
	}
}
