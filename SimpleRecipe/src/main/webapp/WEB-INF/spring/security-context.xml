<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.4.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- security-context.xml 내부에서 사용할 bean 클래스 설정 -->
	<!-- <bean id="customAccessDenied" class="com.simplerecipe.common.security.CustomAccessDeniedHandler" /> -->
	<!-- <bean id="customLoginSuccess" class="com.simplerecipe.common.security.CustomLoginSuccessHandler" /> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean id="loginService" class="com.simplerecipe.login.service.LoginServiceImpl" />
		
	
	<!-- image, css, js에 대한 시큐리티 설정을 해제한다. -->
	<security:http pattern="/resources/js/*.js" security="none" />
	<security:http pattern="/resources/css/*.css" security="none" />
	<security:http pattern="/resources/img/**" security="none" />
		
	<!-- auto-config="true"를 설정한것만으로 기본 로그인/http기본인증/로그아웃 기능 제공 
	use-expressions="true"를 설정하면 spEL를 쓰겠다는 것이다. -->
	<security:http auto-config="true" use-expressions="true"> <!-- 컨트롤러 url 작성 -->
	
		<!-- 로그인 창 및 일부 메인 기능에 대해, 모든 사용자에게 접근을 허가함 -->
		<security:intercept-url pattern="/login/login" access="permitAll" />
		<security:intercept-url pattern="/login/login-processing" access="permitAll" />
		<security:intercept-url pattern="/main/main" access="permitAll" />
		<security:intercept-url pattern="/main/result" access="permitAll" />
		<security:intercept-url pattern="/main/detail" access="permitAll" />
		<security:intercept-url pattern="/reg/**" access="permitAll" />
		
		<!-- css, js 등의 resources 내부의 모든 파일에 대한 접근 권한을 허가한다. --> 
		<security:intercept-url pattern="/resources/**" access="permitAll" />

		
		<!-- 삽입, 수정, 삭제 기능에 대해, 회원에 한해서 접근 가능하도록 한다. -->
		<security:intercept-url pattern="/main/insert" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/main/mypage" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/main/update" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/board/insert**" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/board/update**" access="hasRole('ROLE_MEMBER')" />
		
		<!-- 관리자가 다룰 부분에 대해, 관리자 계정에 한해서 접근 가능 -->
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		
		
		<!-- form login : login페이지 등록 
		default-target-url : 로그인 후 기본적으로 보여질 페이지 -->
		<security:form-login login-page="/login/login"
							 login-processing-url="/login/login-processing"
							 default-target-url="/main/main"
							 authentication-failure-url="/login/login?error"
							 username-parameter="userTbId"
							 password-parameter="userTbPwd" />
							 
		<!-- 최대 한 개의 세션만 생성되도록 설정 -->
		<security:session-management>
			<security:concurrency-control 
				max-sessions="1"
				expired-url="/users/login"
				error-if-maximum-exceeded="true" />
		</security:session-management>
							 
		<!-- 로그아웃 설정, session 초기화 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" />
		
		<!-- data-source-ref : DataSource를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록
		token-validity-seconds : 쿠키의 유효시간을 지정합니다. -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
							 
		<!-- 접근이 거부될 시 보여질 에러 페이지 설정 -->
		<security:access-denied-handler error-page="/accessError" />
							 
		<!-- 간단한 설정으로도 csrf를 이용한 공격을 막을 수 있다. -->
		<security:csrf />
		
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider> 
			<!-- user-service-ref="loginService"> -->
			<!-- 
			<security:user-service>
				<security:user name="aaa" password="{noop}aaa" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN" />
			</security:user-service>
			 -->
			<!-- 비밀번호 등 보안이 필요한 문자열에 대해 bcrypt 암호화를 지원한다. -->
			<security:password-encoder hash="bcrypt" />
			<security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="SELECT USER_TB_ID, USER_TB_PWD, USER_TB_ENABLED FROM USER_INFO WHERE USER_TB_ID = ?"
				authorities-by-username-query="SELECT USER_TB_ID, USER_TB_PWD, USER_TB_AUTH AS authority FROM USER_INFO WHERE USER_TB_ID = ?"
			/>
			<!-- <security:password-encoder ref="bcryptPasswordEncoder" /> -->
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>
